"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.jsonFarcasterSignatureHeaderSchema = exports.encodedJsonFarcasterSignatureSchema = exports.aspectRatioSchema = exports.hexColorSchema = exports.caip19TokenSchema = exports.buttonTitleSchema = exports.frameNameSchema = exports.secureUrlSchema = void 0;
const zod_1 = require("zod");
exports.secureUrlSchema = zod_1.z
    .string()
    .url()
    .startsWith('https://', { message: 'Must be an https url' })
    .max(1024);
exports.frameNameSchema = zod_1.z.string().max(32);
exports.buttonTitleSchema = zod_1.z.string().max(32);
const CAIP_19_REGEX = /^[-a-z0-9]{3,8}:[-_a-zA-Z0-9]{1,32}\/(?:[-a-z0-9]{3,8}:[-.%a-zA-Z0-9]{1,128}(?:\/[-.%a-zA-Z0-9]{1,78})?|native)$/;
exports.caip19TokenSchema = zod_1.z
    .string()
    .regex(CAIP_19_REGEX, { message: 'Invalid CAIP-19 asset ID' });
exports.hexColorSchema = zod_1.z
    .string()
    .regex(/^#([0-9A-F]{3}|[0-9A-F]{6})$/i, {
    message: 'Invalid hex color code. It should be in the format #RRGGBB or #RGB.',
});
exports.aspectRatioSchema = zod_1.z.union([zod_1.z.literal('1:1'), zod_1.z.literal('3:2')]);
exports.encodedJsonFarcasterSignatureSchema = zod_1.z.object({
    header: zod_1.z.string(),
    payload: zod_1.z.string(),
    signature: zod_1.z.string(),
});
exports.jsonFarcasterSignatureHeaderSchema = zod_1.z.object({
    fid: zod_1.z.number(),
    type: zod_1.z.literal('app_key'),
    key: zod_1.z.string().startsWith('0x'),
});
